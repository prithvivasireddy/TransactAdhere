set serveroutput on size 30000;

CREATE OR REPLACE PACKAGE TRANSACTION_PACKAGE AS 
   -- INSERT A TRANSACTION
   PROCEDURE TRANSACTIONINSERT(
    P_SENDER_RECEIVER_PAYMENT_TOKEN_ID IN TRANSACTION.SENDER_RECEIVER_PAYMENT_TOKEN_ID%TYPE,
    P_BUSINESS_TRANSACTION_ID IN TRANSACTION.BUSINESS_TRANSACTION_ID%TYPE,
    P_TRANSACTION_AMOUNT IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
    P_TRANSACTION_STATUS IN TRANSACTION.TRANSACTION_STATUS%TYPE,
    P_TRANSACTION_DESCRIPTION IN TRANSACTION.TRANSACTION_DESCRIPTION%TYPE);
    
    -- UPDATE A TRANSACTION
    PROCEDURE TRANSACTIONUPDATE(
    P_TRANSACTION_ID IN TRANSACTION.TRANSACTION_ID%TYPE,
    P_TRANSACTION_STATUS IN TRANSACTION.TRANSACTION_STATUS%TYPE);
    
END TRANSACTION_PACKAGE;
/

CREATE OR REPLACE PACKAGE BODY TRANSACTION_PACKAGE AS 
    PROCEDURE TRANSACTIONINSERT(
        P_SENDER_RECEIVER_PAYMENT_TOKEN_ID IN TRANSACTION.SENDER_RECEIVER_PAYMENT_TOKEN_ID%TYPE,
        P_BUSINESS_TRANSACTION_ID IN TRANSACTION.BUSINESS_TRANSACTION_ID%TYPE,
        P_TRANSACTION_AMOUNT IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
        P_TRANSACTION_STATUS IN TRANSACTION.TRANSACTION_STATUS%TYPE,
        P_TRANSACTION_DESCRIPTION IN TRANSACTION.TRANSACTION_DESCRIPTION%TYPE)
    IS
        P_TOKEN_STATUS CHAR(10);
        P_TOKEN_VALIDATION_END_DATE DATE;
        Fail EXCEPTION;
    BEGIN
    -- Verifying TOKEN EXIST
        BEGIN
            SELECT TOKEN_STATUS , TOKEN_VALIDATION_END_DATE INTO P_TOKEN_STATUS, P_TOKEN_VALIDATION_END_DATE
            FROM SENDER_RECEIVER_PAYMENT_TOKEN
            WHERE TOKEN_ID = P_SENDER_RECEIVER_PAYMENT_TOKEN_ID;
        EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR ! Wrong TOKEN NUMBER');
        END;
    -- Verifying TOKEN STATUS ACTIVE
        BEGIN
            IF P_TOKEN_STATUS = 'INACTIVE'
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! TOKEN is Inactive');
                RAISE Fail;
            END IF;  
        END;
    --Verifying TOKEN Valid
        BEGIN
            IF P_TOKEN_VALIDATION_END_DATE < TRUNC(SYSDATE)
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! TOKEN validation date passed');
                RAISE Fail;
            END IF;  
        END;
        --Insert the transaction
        BEGIN 
            insert into transaction (transaction_id, sender_receiver_payment_token_id, business_transaction_id, transaction_date, transaction_amount, transaction_status, transaction_description)
            values (transaction_id_seq.nextval, P_SENDER_RECEIVER_PAYMENT_TOKEN_ID, P_BUSINESS_TRANSACTION_ID, sysdate, P_TRANSACTION_AMOUNT, P_TRANSACTION_STATUS, P_TRANSACTION_DESCRIPTION);
        EXCEPTION 
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! Insertion Failed');
                RAISE Fail;
        END;
    EXCEPTION
        WHEN OTHERS THEN 
            NULL;
    END TRANSACTIONINSERT;
    
    PROCEDURE TRANSACTIONUPDATE(
        P_TRANSACTION_ID IN TRANSACTION.TRANSACTION_ID%TYPE,
        P_TRANSACTION_STATUS IN TRANSACTION.TRANSACTION_STATUS%TYPE)
    IS
        P_TRANSACTION_STATUS_OLD CHAR(10);
        Fail EXCEPTION;
    BEGIN
    -- Verifying THE TRANSACTION EXIST
        BEGIN
            SELECT TRANSACTION_STATUS INTO P_TRANSACTION_STATUS_OLD 
            FROM TRANSACTION
            WHERE TRANSACTION_ID = P_TRANSACTION_ID;
        EXCEPTION 
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! Wrong TRANSACTION ID');
        END;
    -- Verifying THE UPDATE IS from VALID TRANSACTION STATE and in VALID TRANSACTION STATE
        BEGIN
            IF P_TRANSACTION_STATUS_OLD != 'PENDING' OR P_TRANSACTION_STATUS NOT IN ('COMPLETED','CANCELED')
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! TRANSACTION IS NOT IN VALID STATE TO MAKE THE UPDATE');
                RAISE Fail;
            END IF;  
        END;
    -- UPDATING THE TRANSACTION
        BEGIN 
            UPDATE TRANSACTION 
            SET TRANSACTION_STATUS = P_TRANSACTION_STATUS
            WHERE TRANSACTION_ID = P_TRANSACTION_ID;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! UPDATION Failed');
                RAISE Fail;
        END;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END TRANSACTIONUPDATE;
END TRANSACTION_PACKAGE;
/

GRANT EXECUTE ON TRANSACTION_PACKAGE to PROD;
COMMIT;