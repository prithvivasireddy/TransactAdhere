set serveroutput on size 30000;

CREATE OR REPLACE PACKAGE CUSTOMER_PACKAGE AS 
   -- INSERT A CUSTOMER
   PROCEDURE CUSTOMERINSERT(
        P_FIRST_NAME IN CUSTOMER.FIRST_NAME%TYPE,
        P_LAST_NAME IN CUSTOMER.LAST_NAME%TYPE,
        P_DATE_OF_BIRTH IN CUSTOMER.DATE_OF_BIRTH%TYPE,
        P_SSN IN CUSTOMER.SSN%TYPE,
        P_EMAIL IN CUSTOMER.EMAIL%TYPE,
        P_TYPE_OF_USER IN CUSTOMER.TYPE_OF_USER%TYPE,
        P_STATUS IN CUSTOMER.STATUS%TYPE,
        P_PHONE_NO IN CUSTOMER.PHONE_NO%TYPE);
    
    -- UPDATE A CUSTOMER
    PROCEDURE CUSTOMERUPDATE(
        P_CUSTOMER_ID IN CUSTOMER.CUSTOMER_ID%TYPE,
        P_FIRST_NAME IN CUSTOMER.FIRST_NAME%TYPE DEFAULT NULL,
        P_LAST_NAME IN CUSTOMER.LAST_NAME%TYPE DEFAULT NULL,
        P_DATE_OF_BIRTH IN CUSTOMER.DATE_OF_BIRTH%TYPE DEFAULT NULL,
        P_SSN IN CUSTOMER.SSN%TYPE DEFAULT NULL,
        P_EMAIL IN CUSTOMER.EMAIL%TYPE,
        P_TYPE_OF_USER IN CUSTOMER.TYPE_OF_USER%TYPE DEFAULT NULL,
        P_STATUS IN CUSTOMER.STATUS%TYPE DEFAULT NULL,
        P_PHONE_NO IN CUSTOMER.PHONE_NO%TYPE DEFAULT NULL);
        
    -- INSERT CUSTOMER ADDRESS 
    PROCEDURE CUSTOMERADDRESSINSERT(
        P_CUSTOMER_ID IN CUSTOMER_ADDRESS.CUSTOMER_ID%TYPE,
        P_APPARTMENT IN CUSTOMER_ADDRESS.APPARTMENT%TYPE,
        P_STREET IN CUSTOMER_ADDRESS.STREET%TYPE,
        P_CITY IN CUSTOMER_ADDRESS.CITY%TYPE,
        P_STATE IN CUSTOMER_ADDRESS.STATE%TYPE,
        P_ZIPCODE IN CUSTOMER_ADDRESS.ZIPCODE%TYPE);
      
   -- UDPATE CUSTOMER ADDRESS 
    PROCEDURE CUSTOMERADDRESSUPDATE( 
        P_CUSTOMER_ID IN CUSTOMER_ADDRESS.CUSTOMER_ID%TYPE,
        P_APPARTMENT IN CUSTOMER_ADDRESS.APPARTMENT%TYPE DEFAULT NULL,
        P_STREET IN CUSTOMER_ADDRESS.STREET%TYPE DEFAULT NULL,
        P_CITY IN CUSTOMER_ADDRESS.CITY%TYPE DEFAULT NULL,
        P_STATE IN CUSTOMER_ADDRESS.STATE%TYPE DEFAULT NULL,
        P_ZIPCODE IN CUSTOMER_ADDRESS.ZIPCODE%TYPE DEFAULT NULL);
        
    -- INSERT BUSINESS_DETAIL     
    PROCEDURE BUSINESSDETAILINSERT (
        P_CUSTOMER_ID IN BUSINESS_DETAIL.CUSTOMER_ID%TYPE,
        P_BUSINESS_NAME IN BUSINESS_DETAIL.BUSINESS_NAME%TYPE,
        P_BUSINESS_REGISTRATION_NUMBER IN BUSINESS_DETAIL.BUSINESS_REGISTRATION_NUMBER%TYPE);
        
    -- UPDATE BUSINESS_DETAIL         
    PROCEDURE BUSINESSDETAILUPDATE (
        P_CUSTOMER_ID IN BUSINESS_DETAIL.CUSTOMER_ID%TYPE,
        P_BUSINESS_NAME IN BUSINESS_DETAIL.BUSINESS_NAME%TYPE DEFAULT NULL,
        P_BUSINESS_REGISTRATION_NUMBER IN BUSINESS_DETAIL.BUSINESS_REGISTRATION_NUMBER%TYPE DEFAULT NULL);
    
END CUSTOMER_PACKAGE;
/

CREATE OR REPLACE PACKAGE BODY CUSTOMER_PACKAGE AS 
    PROCEDURE CUSTOMERINSERT(
        P_FIRST_NAME IN CUSTOMER.FIRST_NAME%TYPE,
        P_LAST_NAME IN CUSTOMER.LAST_NAME%TYPE,
        P_DATE_OF_BIRTH IN CUSTOMER.DATE_OF_BIRTH%TYPE,
        P_SSN IN CUSTOMER.SSN%TYPE,
        P_EMAIL IN CUSTOMER.EMAIL%TYPE,
        P_TYPE_OF_USER IN CUSTOMER.TYPE_OF_USER%TYPE,
        P_STATUS IN CUSTOMER.STATUS%TYPE,
        P_PHONE_NO IN CUSTOMER.PHONE_NO%TYPE)
    IS
        CUSTOMER_COUNT INT;
        Fail EXCEPTION;
    BEGIN
    -- Verifying CUSTOMER_EMAIL and CUSTOMER_PHONENO IS UNIQUE
        BEGIN
            SELECT COUNT(*) INTO CUSTOMER_COUNT
            FROM CUSTOMER
            WHERE EMAIL = P_EMAIL OR PHONE_NO = P_PHONE_NO;
            IF CUSTOMER_COUNT > 0 
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! CUSTOMER EMAIL OR PHONE NO ALREADY EXIST');
                RAISE Fail;
            END IF;
        END;
    -- VERIFY CUSTOMER_TYPE IS VALID
        BEGIN
            IF (P_TYPE_OF_USER NOT IN ('INDIVIDUAL','BUSINESS'))
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! CUSTOMER TYPE NOT VALID');
                RAISE Fail;
            END IF;
        END;    
    --Insert the CUSTOMER
        BEGIN
            INSERT INTO CUSTOMER (CUSTOMER_ID, FIRST_NAME, LAST_NAME, DATE_OF_BIRTH, SSN, EMAIL, TYPE_OF_USER, STATUS, PHONE_NO)
            VALUES (CUSTOMER_ID_SEQ.NEXTVAL, P_FIRST_NAME, P_LAST_NAME, P_DATE_OF_BIRTH, P_SSN, P_EMAIL, P_TYPE_OF_USER, P_STATUS, P_PHONE_NO);
        EXCEPTION 
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! Insertion Failed');
                RAISE Fail;
        END;
    EXCEPTION
        WHEN OTHERS THEN 
            NULL;
    END CUSTOMERINSERT;
    
    PROCEDURE CUSTOMERUPDATE(
        P_CUSTOMER_ID IN CUSTOMER.CUSTOMER_ID%TYPE,
        P_FIRST_NAME IN CUSTOMER.FIRST_NAME%TYPE,
        P_LAST_NAME IN CUSTOMER.LAST_NAME%TYPE,
        P_DATE_OF_BIRTH IN CUSTOMER.DATE_OF_BIRTH%TYPE,
        P_SSN IN CUSTOMER.SSN%TYPE,
        P_EMAIL IN CUSTOMER.EMAIL%TYPE,
        P_TYPE_OF_USER IN CUSTOMER.TYPE_OF_USER%TYPE,
        P_STATUS IN CUSTOMER.STATUS%TYPE,
        P_PHONE_NO IN CUSTOMER.PHONE_NO%TYPE)
    IS
        P_CUSTOMER_OLD CUSTOMER%ROWTYPE;
        CUSTOMER_COUNT INT;
        F_FIRST_NAME CUSTOMER.FIRST_NAME%TYPE;
        F_LAST_NAME CUSTOMER.LAST_NAME%TYPE;
        F_DATE_OF_BIRTH CUSTOMER.DATE_OF_BIRTH%TYPE;
        F_SSN CUSTOMER.SSN%TYPE;
        F_EMAIL CUSTOMER.EMAIL%TYPE;
        F_TYPE_OF_USER CUSTOMER.TYPE_OF_USER%TYPE;
        F_STATUS CUSTOMER.STATUS%TYPE;
        F_PHONE_NO CUSTOMER.PHONE_NO%TYPE;
        P_IS_BUSINESS_TO_INDIVIDUAL_UPDATE BOOLEAN;
        Fail EXCEPTION;
    BEGIN
    -- Verifying THE CUSTOMER EXIST
        BEGIN
            SELECT * INTO P_CUSTOMER_OLD 
            FROM CUSTOMER
            WHERE CUSTOMER_ID = P_CUSTOMER_ID;
        EXCEPTION 
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! CUSTOMER NOT FOUND');
        END;
    -- Verifying NEW EMAIL IS NOT IN DATABASE
        BEGIN
            SELECT COUNT(*) INTO CUSTOMER_COUNT
            FROM CUSTOMER
            WHERE EMAIL = P_EMAIL AND CUSTOMER_ID != P_CUSTOMER_ID;
            IF CUSTOMER_COUNT > 0 
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! CUSTOMER EMAIL PROVIDED ALREADY EXIST IN DATABSE, UPDATE FAILED');
                RAISE Fail;
            END IF;
        END;
    -- VERYING TYPE OF USER IS VALID
        BEGIN
            IF (P_TYPE_OF_USER NOT IN ('INDIVIDUAL','BUSINESS'))
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! CUSTOMER TYPE NOT VALID');
                RAISE Fail;
            END IF;
        END;    
    -- CHECK IS TYPE OF USER CHANGE
        BEGIN
            IF P_TYPE_OF_USER = 'INDIVIDUAL'
            THEN
                IF P_CUSTOMER_OLD.TYPE_OF_USER = 'BUSINESS'
                THEN P_IS_BUSINESS_TO_INDIVIDUAL_UPDATE := TRUE;
                ELSE P_IS_BUSINESS_TO_INDIVIDUAL_UPDATE := FALSE;
                END IF;
            END IF;
        END;    
    -- UPDATE ALL NULL INPUT TO OLD VALUES
        IF (P_FIRST_NAME IS NULL)
            THEN F_FIRST_NAME := P_CUSTOMER_OLD.FIRST_NAME;
        ELSE  F_FIRST_NAME := P_FIRST_NAME;
        END IF;
        IF (P_LAST_NAME IS NULL)
            THEN F_LAST_NAME := P_CUSTOMER_OLD.LAST_NAME;
        ELSE  F_LAST_NAME := P_LAST_NAME;
        END IF;
        IF (P_DATE_OF_BIRTH IS NULL)
            THEN F_DATE_OF_BIRTH := P_CUSTOMER_OLD.DATE_OF_BIRTH;
        ELSE  F_DATE_OF_BIRTH := P_DATE_OF_BIRTH;
        END IF;
        IF (P_SSN IS NULL)
            THEN F_SSN := P_CUSTOMER_OLD.SSN;
        ELSE  F_SSN := P_SSN;
        END IF;
        IF (P_EMAIL IS NULL)
            THEN F_EMAIL := P_CUSTOMER_OLD.EMAIL;
        ELSE  F_EMAIL := P_EMAIL;
        END IF;
        IF (P_TYPE_OF_USER IS NULL)
            THEN F_TYPE_OF_USER := P_CUSTOMER_OLD.TYPE_OF_USER;
        ELSE  F_TYPE_OF_USER := P_TYPE_OF_USER;
        END IF;
        IF (P_STATUS IS NULL)
            THEN F_STATUS := P_CUSTOMER_OLD.STATUS;
        ELSE  F_STATUS := P_STATUS;
        END IF;
        IF (P_PHONE_NO IS NULL)
            THEN F_PHONE_NO := P_CUSTOMER_OLD.PHONE_NO;
        ELSE  F_PHONE_NO := P_PHONE_NO;
        END IF;
        
    -- UPDATING THE CUSTOMER
        BEGIN 
            UPDATE CUSTOMER 
            SET FIRST_NAME = F_FIRST_NAME, LAST_NAME = F_LAST_NAME, DATE_OF_BIRTH = F_DATE_OF_BIRTH, SSN = F_SSN, EMAIL = F_EMAIL, TYPE_OF_USER = F_TYPE_OF_USER, STATUS = F_STATUS, PHONE_NO = F_PHONE_NO
            WHERE CUSTOMER_ID = P_CUSTOMER_ID;
            IF P_IS_BUSINESS_TO_INDIVIDUAL_UPDATE
            THEN 
                DELETE FROM BUSINESS_DETAIL WHERE CUSTOMER_ID = P_CUSTOMER_ID;
            END IF;    
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK;
                DBMS_OUTPUT.PUT_LINE('ERROR ! UPDATION Failed');
                RAISE Fail;
        END;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END CUSTOMERUPDATE;
    
    PROCEDURE CUSTOMERADDRESSINSERT(
        P_CUSTOMER_ID IN CUSTOMER_ADDRESS.CUSTOMER_ID%TYPE,
        P_APPARTMENT IN CUSTOMER_ADDRESS.APPARTMENT%TYPE,
        P_STREET IN CUSTOMER_ADDRESS.STREET%TYPE,
        P_CITY IN CUSTOMER_ADDRESS.CITY%TYPE,
        P_STATE IN CUSTOMER_ADDRESS.STATE%TYPE,
        P_ZIPCODE IN CUSTOMER_ADDRESS.ZIPCODE%TYPE)
    IS
        CUSTOMER_COUNT INT;
        CUSTOMER_ADDRESS_COUNT INT;
        Fail EXCEPTION;
    BEGIN
        -- Verifying THE CUSTOMER EXIST
        BEGIN
            SELECT COUNT(*) INTO CUSTOMER_COUNT 
            FROM CUSTOMER
            WHERE CUSTOMER_ID = P_CUSTOMER_ID;
            IF (CUSTOMER_COUNT < 1)
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! CUSTOMER DOES NOT EXIST');
                RAISE Fail;
            END IF;
        END;
        -- Verifying NO CUSTOMER ADDRESS EXIST FOR GIVEN CUSTOMER
        BEGIN
            SELECT COUNT(*) INTO CUSTOMER_ADDRESS_COUNT 
            FROM CUSTOMER_ADDRESS
            WHERE CUSTOMER_ID = P_CUSTOMER_ID;
            IF (CUSTOMER_ADDRESS_COUNT > 0)
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! ADDRESS ALREADY EXIST FOR GIVEN CUSTOMER');
                RAISE Fail;
            END IF;
        END;
        -- INSERT CUSTOMER ADDRESS
        BEGIN
            insert into customer_address (customer_id, appartment, street, city, state, zipcode)
            values (P_CUSTOMER_ID, P_APPARTMENT, P_STREET, P_CITY, P_STATE, P_ZIPCODE);
        EXCEPTION 
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! Insertion Failed');
                RAISE Fail;
        END;    
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END CUSTOMERADDRESSINSERT;
    
    
    PROCEDURE CUSTOMERADDRESSUPDATE( 
        P_CUSTOMER_ID IN CUSTOMER_ADDRESS.CUSTOMER_ID%TYPE,
        P_APPARTMENT IN CUSTOMER_ADDRESS.APPARTMENT%TYPE,
        P_STREET IN CUSTOMER_ADDRESS.STREET%TYPE,
        P_CITY IN CUSTOMER_ADDRESS.CITY%TYPE,
        P_STATE IN CUSTOMER_ADDRESS.STATE%TYPE,
        P_ZIPCODE IN CUSTOMER_ADDRESS.ZIPCODE%TYPE)
    IS
    P_CUSTOMER_ADDRESS_OLD CUSTOMER_ADDRESS%ROWTYPE;
    F_APPARTMENT CUSTOMER_ADDRESS.APPARTMENT%TYPE;
    F_STREET CUSTOMER_ADDRESS.STREET%TYPE;
    F_CITY CUSTOMER_ADDRESS.CITY%TYPE;
    F_STATE CUSTOMER_ADDRESS.STATE%TYPE;
    F_ZIPCODE CUSTOMER_ADDRESS.ZIPCODE%TYPE;
    FAIL EXCEPTION;
    
    BEGIN
        -- Verifying THE CUSTOMER ADDRESS EXIST
        BEGIN
            SELECT * INTO P_CUSTOMER_ADDRESS_OLD 
            FROM CUSTOMER_ADDRESS
            WHERE CUSTOMER_ID = P_CUSTOMER_ID;   
        EXCEPTION 
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! CUSTOMER ADDRESS NOT FOUND');
        END;
        -- UPDATE ALL NULL INPUT TO OLD VALUES    
        IF (P_APPARTMENT IS NULL)
            THEN F_APPARTMENT := P_CUSTOMER_ADDRESS_OLD.APPARTMENT;
        ELSE  F_APPARTMENT := P_APPARTMENT;
        END IF;
        IF (P_STREET IS NULL)
            THEN F_STREET := P_CUSTOMER_ADDRESS_OLD.STREET;
        ELSE  F_STREET := P_STREET;
        END IF;
        IF (P_CITY IS NULL)
            THEN F_CITY := P_CUSTOMER_ADDRESS_OLD.CITY;
        ELSE  F_CITY := P_CITY;
        END IF;
        IF (P_STATE IS NULL)
            THEN F_STATE := P_CUSTOMER_ADDRESS_OLD.STATE;
        ELSE  F_STATE := P_STATE;
        END IF;
        IF (P_ZIPCODE IS NULL)
            THEN F_ZIPCODE := P_CUSTOMER_ADDRESS_OLD.ZIPCODE;
        ELSE  F_ZIPCODE := P_ZIPCODE;
        END IF;
        -- UPDATING THE CUSTOMER
        BEGIN
            UPDATE CUSTOMER_ADDRESS
            SET APPARTMENT = F_APPARTMENT, STREET = F_STREET, CITY = F_CITY, STATE = F_STATE, ZIPCODE = F_ZIPCODE
            WHERE CUSTOMER_ID = P_CUSTOMER_ID;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! UPDATION Failed');
                RAISE Fail;
        END;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END CUSTOMERADDRESSUPDATE;  
    
    PROCEDURE BUSINESSDETAILINSERT (
        P_CUSTOMER_ID IN BUSINESS_DETAIL.CUSTOMER_ID%TYPE,
        P_BUSINESS_NAME IN BUSINESS_DETAIL.BUSINESS_NAME%TYPE,
        P_BUSINESS_REGISTRATION_NUMBER IN BUSINESS_DETAIL.BUSINESS_REGISTRATION_NUMBER%TYPE)
    IS
        CUSTOMER_COUNT INT;
        BUSINESS_DETAIL_COUNT INT;
        Fail EXCEPTION;
    BEGIN
        -- Verifying THE CUSTOMER EXIST AND IS OF TYPE BUSINESS
        BEGIN
            SELECT COUNT(*) INTO CUSTOMER_COUNT 
            FROM CUSTOMER
            WHERE CUSTOMER_ID = P_CUSTOMER_ID AND TYPE_OF_USER = 'BUSINESS';
            IF (CUSTOMER_COUNT < 1)
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! CUSTOMER DOES NOT EXIST OR IS NOT OF TYPE BUSINESS');
                RAISE Fail;
            END IF;
        END;
        -- Verifying NO BUSINESS DETAIL EXIST FOR GIVEN CUSTOMER
        BEGIN
            SELECT COUNT(*) INTO BUSINESS_DETAIL_COUNT 
            FROM BUSINESS_DETAIL
            WHERE CUSTOMER_ID = P_CUSTOMER_ID;
            IF (BUSINESS_DETAIL_COUNT > 0)
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! BUSINESS DETAIL ALREADY EXIST FOR GIVEN CUSTOMER');
                RAISE Fail;
            END IF;
        END;
        -- INSERT BUSINESS DETAIL
        BEGIN
            insert into business_detail (CUSTOMER_ID, BUSINESS_NAME, BUSINESS_REGISTRATION_NUMBER)
            values (P_CUSTOMER_ID, P_BUSINESS_NAME, P_BUSINESS_REGISTRATION_NUMBER);
        EXCEPTION 
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! Insertion Failed');
                RAISE Fail;
        END;  
        
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END BUSINESSDETAILINSERT;
    
    
    PROCEDURE BUSINESSDETAILUPDATE (
        P_CUSTOMER_ID IN BUSINESS_DETAIL.CUSTOMER_ID%TYPE,
        P_BUSINESS_NAME IN BUSINESS_DETAIL.BUSINESS_NAME%TYPE,
        P_BUSINESS_REGISTRATION_NUMBER IN BUSINESS_DETAIL.BUSINESS_REGISTRATION_NUMBER%TYPE)
    IS
        P_BUSINESS_DETAIL_OLD BUSINESS_DETAIL%ROWTYPE;
        BUSINESS_COUNT INT;
        F_BUSINESS_NAME BUSINESS_DETAIL.BUSINESS_NAME%TYPE;
        F_BUSINESS_REGISTRATION_NUMBER BUSINESS_DETAIL.BUSINESS_REGISTRATION_NUMBER%TYPE;
        FAIL EXCEPTION;
    BEGIN
        -- Verifying THE BUSINESS_DETAIL EXIST
        BEGIN
            SELECT * INTO P_BUSINESS_DETAIL_OLD 
            FROM BUSINESS_DETAIL
            WHERE BUSINESS_REGISTRATION_NUMBER = P_BUSINESS_REGISTRATION_NUMBER; 
        EXCEPTION 
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! BUSINESS DETAIL NOT FOUND');
        END;
        -- VERIFY THE BUSINESS_REGISTRATION_NUMBER ALREADY DOES NOT EXIST
        BEGIN
            SELECT COUNT(*) INTO BUSINESS_COUNT
            FROM BUSINESS_DETAIL
            WHERE BUSINESS_REGISTRATION_NUMBER = P_BUSINESS_REGISTRATION_NUMBER AND CUSTOMER_ID != P_CUSTOMER_ID;
            IF (BUSINESS_COUNT < 0)
            THEN 
                DBMS_OUTPUT.PUT_LINE('ERROR ! CUSTOMER TYPE NOT VALID');
                RAISE Fail;
            END IF;
        END;
        -- UPDATE ALL NULL INPUT TO OLD VALUES    
        IF (P_BUSINESS_NAME IS NULL)
            THEN F_BUSINESS_NAME := P_BUSINESS_DETAIL_OLD.BUSINESS_NAME;
        ELSE  F_BUSINESS_NAME := P_BUSINESS_NAME;
        END IF;
        IF (P_BUSINESS_REGISTRATION_NUMBER IS NULL)
            THEN F_BUSINESS_REGISTRATION_NUMBER := P_BUSINESS_DETAIL_OLD.BUSINESS_REGISTRATION_NUMBER;
        ELSE  F_BUSINESS_REGISTRATION_NUMBER := P_BUSINESS_REGISTRATION_NUMBER;
        END IF;
        -- UPDATING THE CUSTOMER
        BEGIN
            UPDATE BUSINESS_DETAIL
            SET BUSINESS_NAME = F_BUSINESS_NAME, BUSINESS_REGISTRATION_NUMBER = F_BUSINESS_REGISTRATION_NUMBER
            WHERE CUSTOMER_ID = P_CUSTOMER_ID;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! UPDATION Failed');
                RAISE Fail;
        END;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END BUSINESSDETAILUPDATE;
END CUSTOMER_PACKAGE;
/

GRANT EXECUTE ON CUSTOMER_PACKAGE to PROD;
COMMIT;