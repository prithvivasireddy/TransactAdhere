purge recyclebin;
SET SERVEROUTPUT on;

DECLARE

BEGIN
  EXECUTE IMMEDIATE 'DROP ROLE DEVELOPER';
  EXECUTE IMMEDIATE 'DROP ROLE PROD';
  EXECUTE IMMEDIATE 'DROP ROLE CUSTOMER_SERVICE_EXECUTIVE';
  EXECUTE IMMEDIATE 'DROP ROLE FINANCE_CUSTOMER_SERVICE_EXECUTIVE';
  
  EXCEPTION
   WHEN OTHERS THEN
   IF SQLCODE != -1919
   THEN RAISE;
   END IF;
END;
/

BEGIN
  EXECUTE IMMEDIATE 'DROP USER DEVELOPER_USER';
  EXECUTE IMMEDIATE 'DROP USER PROD_USER';
  EXECUTE IMMEDIATE 'DROP USER CUSTOMER_SERVICE_EXECUTIVE_USER';
  EXECUTE IMMEDIATE 'DROP USER FINANCE_CUSTOMER_SERVICE_EXECUTIVE_USER';
  
  EXCEPTION
   WHEN OTHERS THEN
   IF SQLCODE != -1919
   THEN RAISE;
   END IF;
END;
/

CREATE ROLE DEVELOPER;
CREATE ROLE PROD;
CREATE ROLE CUSTOMER_SERVICE_EXECUTIVE;
CREATE ROLE FINANCE_CUSTOMER_SERVICE_EXECUTIVE;

CREATE USER DEVELOPER_USER IDENTIFIED BY "DEVELOPER@settleit123";
CREATE USER PROD_USER IDENTIFIED BY "PROD@settleit123";
CREATE USER CUSTOMER_SERVICE_EXECUTIVE_USER IDENTIFIED BY "CSE@settleit123";
CREATE USER FINANCE_CUSTOMER_SERVICE_EXECUTIVE_USER IDENTIFIED BY "FCSE@settleit123";

GRANT DEVELOPER TO DEVELOPER_USER;
GRANT PROD TO PROD_USER;
GRANT CUSTOMER_SERVICE_EXECUTIVE TO CUSTOMER_SERVICE_EXECUTIVE_USER;
GRANT FINANCE_CUSTOMER_SERVICE_EXECUTIVE TO FINANCE_CUSTOMER_SERVICE_EXECUTIVE_USER;

GRANT CONNECT TO DEVELOPER;
GRANT CONNECT TO PROD;
GRANT CONNECT TO CUSTOMER_SERVICE_EXECUTIVE;
GRANT CONNECT TO FINANCE_CUSTOMER_SERVICE_EXECUTIVE;

DECLARE
    
    customer_table_count number;
    customer_address_table_count number;
    business_detail_table_count number;
    bank_table_count number;
    customer_bank_account_table_count number;
    sender_receiver_payment_token_table_count number;
    transaction_table_count number;
    
    customer_id_seq_count number;
    bank_id_seq_count number;
    bank_account_number_seq_count number;
    token_id_seq_count number;
    transaction_id_seq_count number;
    
BEGIN

    select count(*)
    into customer_table_count from user_tables
    where table_name = 'CUSTOMER';
    
    select count(*)
    into customer_address_table_count from user_tables
    where table_name = 'CUSTOMER_ADDRESS';
    
    select count(*)
    into business_detail_table_count from user_tables
    where table_name = 'BUSINESS_DETAIL';
    
    select count(*)
    into bank_table_count from user_tables
    where table_name = 'BANK';
    
    select count(*)
    into customer_bank_account_table_count from user_tables
    where table_name = 'CUSTOMER_BANK_ACCOUNT';
    
    select count(*)
    into sender_receiver_payment_token_table_count from user_tables
    where table_name = 'SENDER_RECEIVER_PAYMENT_TOKEN';
    
    select count(*)
    into transaction_table_count from user_tables
    where table_name = 'TRANSACTION';
    
    select count(*)
    into customer_id_seq_count from user_sequences
    where sequence_name = 'CUSTOMER_ID_SEQ';
    
    select count(*)
    into bank_id_seq_count from user_sequences
    where sequence_name = 'BANK_ID_SEQ';
    
    select count(*)
    into bank_account_number_seq_count from user_sequences
    where sequence_name = 'BANK_ACCOUNT_NUMBER_SEQ';
    
    select count(*)
    into token_id_seq_count from user_sequences
    where sequence_name = 'TOKEN_ID_SEQ';
    
    select count(*)
    into transaction_id_seq_count from user_sequences
    where sequence_name = 'TRANSACTION_ID_SEQ';


    IF(transaction_table_count > 0) THEN EXECUTE IMMEDIATE 'DROP TABLE TRANSACTION'; END IF;
    IF(sender_receiver_payment_token_table_count > 0) THEN EXECUTE IMMEDIATE 'DROP TABLE SENDER_RECEIVER_PAYMENT_TOKEN'; END IF;
    IF(customer_bank_account_table_count > 0) THEN EXECUTE IMMEDIATE 'DROP TABLE CUSTOMER_BANK_ACCOUNT'; END IF;
    IF(bank_table_count > 0) THEN EXECUTE IMMEDIATE 'DROP TABLE BANK'; END IF;
    IF(business_detail_table_count > 0) THEN EXECUTE IMMEDIATE 'DROP TABLE BUSINESS_DETAIL'; END IF;
    IF(customer_address_table_count > 0) THEN EXECUTE IMMEDIATE 'DROP TABLE CUSTOMER_ADDRESS'; END IF;
    IF(customer_table_count > 0) THEN EXECUTE IMMEDIATE 'DROP TABLE CUSTOMER'; END IF;

    IF(customer_id_seq_count > 0) THEN EXECUTE IMMEDIATE 'DROP SEQUENCE CUSTOMER_ID_SEQ'; END IF;
    IF(bank_id_seq_count > 0) THEN EXECUTE IMMEDIATE 'DROP SEQUENCE BANK_ID_SEQ'; END IF;
    IF(bank_account_number_seq_count > 0) THEN EXECUTE IMMEDIATE 'DROP SEQUENCE BANK_ACCOUNT_NUMBER_SEQ'; END IF;
    IF(token_id_seq_count > 0) THEN EXECUTE IMMEDIATE 'DROP SEQUENCE TOKEN_ID_SEQ'; END IF;
    IF(transaction_id_seq_count > 0) THEN EXECUTE IMMEDIATE 'DROP SEQUENCE TRANSACTION_ID_SEQ'; END IF;

END;
/

CREATE TABLE CUSTOMER (
    CUSTOMER_ID INT PRIMARY KEY,
    FIRST_NAME VARCHAR2(30) NOT NULL,
    LAST_NAME VARCHAR2(30) NOT NULL,
    DATE_OF_BIRTH DATE NOT NULL,
    SSN INT NOT NULL,
    EMAIL VARCHAR2(255) NOT NULL UNIQUE,
    TYPE_OF_USER CHAR(10) NOT NULL,
    STATUS CHAR(10) NOT NULL,
    PHONE_NO INT UNIQUE NOT NULL
);

CREATE INDEX CUSTOMER_FIRSTNAME_I ON CUSTOMER(FIRST_NAME);
CREATE INDEX CUSTOMER_LASTNAME_I ON CUSTOMER(LAST_NAME);

CREATE TABLE CUSTOMER_ADDRESS (
    CUSTOMER_ID NOT NULL REFERENCES CUSTOMER ON DELETE CASCADE,
    APPARTMENT VARCHAR2(10) NOT NULL,
    STREET VARCHAR2(30) NOT NULL,
    CITY VARCHAR2(20) NOT NULL,
    STATE VARCHAR2(20) NOT NULL,
    ZIPCODE VARCHAR2(10) NOT NULL
);

CREATE TABLE BUSINESS_DETAIL (
    CUSTOMER_ID NOT NULL REFERENCES CUSTOMER ON DELETE CASCADE,
    BUSINESS_NAME VARCHAR2(50) NOT NULL,
    BUSINESS_REGISTRATION_NUMBER VARCHAR2(20) UNIQUE NOT NULL
);

CREATE TABLE BANK (
    BANK_ID INT PRIMARY KEY,
    BANK_NAME VARCHAR2(50) NOT NULL,
    BANK_CONTACT_FIRST_NAME VARCHAR2(30) NOT NULL,
    BANK_CONTACT_LAST_NAME VARCHAR2(30) NOT NULL,
    BANK_CUSTOMER_SUPPORT_EMAIL VARCHAR2(255) NOT NULL UNIQUE,
    BANK_CUSTOMER_SUPPORT_NUMBER INT UNIQUE NOT NULL
);

CREATE INDEX BANKNAME_I ON BANK(BANK_NAME);


CREATE TABLE CUSTOMER_BANK_ACCOUNT (
    BANK_ACCOUNT_NUMBER INT PRIMARY KEY,
    CUSTOMER_ID NOT NULL REFERENCES CUSTOMER ON DELETE CASCADE,
    BANK_ID NOT NULL REFERENCES BANK ON DELETE CASCADE,
    ACCOUNT_CREATION_DATE DATE NOT NULL,
    ACCOUNT_STATUS CHAR(10) NOT NULL
);

CREATE TABLE SENDER_RECEIVER_PAYMENT_TOKEN (
    TOKEN_ID INT PRIMARY KEY,
    SENDER_BANK_ACCOUNT_NUMBER NOT NULL REFERENCES CUSTOMER_BANK_ACCOUNT ON DELETE CASCADE,
    RECEIVER_BANK_ACCOUNT_NUMBER NOT NULL REFERENCES CUSTOMER_BANK_ACCOUNT ON DELETE CASCADE,
    TOKEN_CREATION_DATE DATE NOT NULL,
    TOKEN_STATUS CHAR(10) NOT NULL,
    TOKEN_VALIDATION_END_DATE DATE NOT NULL
);

CREATE INDEX SENDER_BANKACC_I ON SENDER_RECEIVER_PAYMENT_TOKEN(SENDER_BANK_ACCOUNT_NUMBER);

CREATE INDEX RECEIVER_BANKACC_I ON SENDER_RECEIVER_PAYMENT_TOKEN(RECEIVER_BANK_ACCOUNT_NUMBER);


CREATE TABLE TRANSACTION (
    TRANSACTION_ID INT PRIMARY KEY,
    SENDER_RECEIVER_PAYMENT_TOKEN_ID NOT NULL REFERENCES SENDER_RECEIVER_PAYMENT_TOKEN ON DELETE CASCADE,
    BUSINESS_TRANSACTION_ID VARCHAR2(50) NOT NULL UNIQUE,
    TRANSACTION_DATE DATE NOT NULL,
    TRANSACTION_AMOUNT INT NOT NULL,
    TRANSACTION_STATUS CHAR(10) NOT NULL,
    TRANSACTION_DESCRIPTION VARCHAR2(100)
);

CREATE INDEX SENDER_RECEIVER_PAYMENT_TOKEN_ID_I ON TRANSACTION(SENDER_RECEIVER_PAYMENT_TOKEN_ID);


CREATE SEQUENCE CUSTOMER_ID_SEQ
ORDER;

CREATE SEQUENCE BANK_ID_SEQ
ORDER;

CREATE SEQUENCE BANK_ACCOUNT_NUMBER_SEQ
START WITH     1000
ORDER;

CREATE SEQUENCE TOKEN_ID_SEQ
START WITH     1000
ORDER;

CREATE SEQUENCE TRANSACTION_ID_SEQ
START WITH     1000
ORDER;


CREATE OR REPLACE TRIGGER deactivate_bank_account_status_on_customer_status_change
    AFTER
    Update 
    on customer
    For each ROW
    when (new.status = 'INACTIVE')
DECLARE
cust_id number;
count_is_present number;
BEGIN
    select count(1) into count_is_present from customer_bank_account where customer_bank_account.customer_id = :new.customer_id;
    
    IF count_is_present = 1 and :new.status = 'INACTIVE' THEN 
        Update customer_bank_account
        set customer_bank_account.account_status = 'INACTIVE' 
        where customer_bank_account.customer_id = :old.customer_id;
    END IF;
END;
/


CREATE OR REPLACE FUNCTION update_token_status (accountnumber in INT)
return NVARCHAR2
IS
BEGIN
Update sender_receiver_payment_token
        set sender_receiver_payment_token.token_status = 'INACTIVE' 
        where sender_receiver_payment_token.sender_bank_account_number = accountnumber or sender_receiver_payment_token.receiver_bank_account_number = accountnumber;
        return 'done';
END;
/

CREATE OR REPLACE TRIGGER deactivate_sender_reciever_payment_on_bank_account_status_change
    AFTER
    UPDATE 
    on customer_bank_account
    For each ROW
    when (new.account_status = 'INACTIVE')
DECLARE
count_is_present number;
abc varchar2(50);
BEGIN
    
    select count(1) into count_is_present from sender_receiver_payment_token 
    where sender_receiver_payment_token.sender_bank_account_number = :old.BANK_ACCOUNT_NUMBER;
    
    IF count_is_present > 0 and :new.account_status = 'INACTIVE' THEN 
        abc := update_token_status(:old.BANK_ACCOUNT_NUMBER);
    END IF;
END;

/
--Number of bank accounts created in a month for a specific bank
CREATE OR REPLACE VIEW BANK_ACCOUNT_IN_MONTH_FOR_BANK  AS
SELECT B.BANK_NAME, TO_CHAR(CBA.ACCOUNT_CREATION_DATE, 'MONTH') ACCOUNT_CREATION_MONTH, COUNT(CBA.BANK_ACCOUNT_NUMBER) AS NO_OF_BANK_ACCOUNT
FROM CUSTOMER_BANK_ACCOUNT CBA JOIN BANK B ON CBA.BANK_ID = B.BANK_ID
GROUP BY B.BANK_NAME, TO_CHAR(CBA.ACCOUNT_CREATION_DATE, 'MONTH');

--Total money sent from and received for a bank account
CREATE OR REPLACE VIEW MONEY_SENT_AND_RECEIVED_FROM_BANK_ACCOUNT  AS
WITH MONEY_SENT_FROM_BANK_ACCOUNT AS
( 
    SELECT CBA.BANK_ACCOUNT_NUMBER AS ACCOUNT_NUMBER, SUM(T.TRANSACTION_AMOUNT) AS SENT_AMOUNT 
    FROM CUSTOMER_BANK_ACCOUNT CBA, TRANSACTION T, SENDER_RECEIVER_PAYMENT_TOKEN SRPT
    WHERE CBA.BANK_ACCOUNT_NUMBER = SRPT.SENDER_BANK_ACCOUNT_NUMBER AND SRPT.TOKEN_ID = T.SENDER_RECEIVER_PAYMENT_TOKEN_ID GROUP BY CBA.BANK_ACCOUNT_NUMBER
),
MONEY_RECEIVED_FROM_BANK_ACCOUNT AS
(
    SELECT CBA.BANK_ACCOUNT_NUMBER AS ACCOUNT_NUMBER, SUM(T.TRANSACTION_AMOUNT) AS RECEIVED_AMOUNT 
    FROM CUSTOMER_BANK_ACCOUNT CBA, TRANSACTION T, SENDER_RECEIVER_PAYMENT_TOKEN SRPT
    WHERE CBA.BANK_ACCOUNT_NUMBER = SRPT.RECEIVER_BANK_ACCOUNT_NUMBER AND SRPT.TOKEN_ID = T.SENDER_RECEIVER_PAYMENT_TOKEN_ID GROUP BY CBA.BANK_ACCOUNT_NUMBER
)
SELECT CBA.BANK_ACCOUNT_NUMBER, MSFBA.SENT_AMOUNT AS MONEY_SENT, MRFBA.RECEIVED_AMOUNT AS MONEY_RECEIVED
FROM CUSTOMER_BANK_ACCOUNT CBA, MONEY_SENT_FROM_BANK_ACCOUNT MSFBA, MONEY_RECEIVED_FROM_BANK_ACCOUNT MRFBA
WHERE CBA.BANK_ACCOUNT_NUMBER = MSFBA.ACCOUNT_NUMBER AND CBA.BANK_ACCOUNT_NUMBER = MRFBA.ACCOUNT_NUMBER;

--State wise list of customers with active and inactive accounts
CREATE OR REPLACE VIEW LIST_OFCUSTOMER_WITH_ACTIVE_OR_INACTIVE_ACCOUNT  AS
SELECT C.CUSTOMER_ID, C.FIRST_NAME || ' ' || C.LAST_NAME AS CUSTOMER_NAME, CA.STATE, C.STATUS 
FROM CUSTOMER C JOIN CUSTOMER_ADDRESS CA ON C.CUSTOMER_ID = CA.CUSTOMER_ID
ORDER BY CA.STATE, C.STATUS;


--Number of transactions that were done business to business, business to individual, individual to business, individual to individual
CREATE OR REPLACE VIEW NUMBER_OF_TRANSACTION_FOR_CATEGORY  AS
WITH SENDER_TYPE_MAPPING AS
(
    SELECT T.TRANSACTION_ID AS TRANSID, C.TYPE_OF_USER AS SENDER_TYPE 
    FROM CUSTOMER C, CUSTOMER_BANK_ACCOUNT CBA, SENDER_RECEIVER_PAYMENT_TOKEN SRPT, TRANSACTION T
    WHERE T.SENDER_RECEIVER_PAYMENT_TOKEN_ID = SRPT.TOKEN_ID AND SRPT.SENDER_BANK_ACCOUNT_NUMBER = CBA.BANK_ACCOUNT_NUMBER AND CBA.CUSTOMER_ID = C.CUSTOMER_ID
),
    RECEIVER_TYPE_MAPPING AS
(
    SELECT T.TRANSACTION_ID AS TRANSID, C.TYPE_OF_USER AS RECEIVER_TYPE 
    FROM CUSTOMER C, CUSTOMER_BANK_ACCOUNT CBA, SENDER_RECEIVER_PAYMENT_TOKEN SRPT, TRANSACTION T
    WHERE T.SENDER_RECEIVER_PAYMENT_TOKEN_ID = SRPT.TOKEN_ID AND SRPT.RECEIVER_BANK_ACCOUNT_NUMBER = CBA.BANK_ACCOUNT_NUMBER AND CBA.CUSTOMER_ID = C.CUSTOMER_ID
),
    TRANASCTION_TYPE_MAPPING AS
(
    SELECT STM.TRANSID AS TRANSID, CASE WHEN STM.SENDER_TYPE = 'INDIVIDUAL' AND RTM.RECEIVER_TYPE = 'INDIVIDUAL' THEN 'INDIVIDUAL TO INDIVIDUAL'
                                        WHEN STM.SENDER_TYPE = 'INDIVIDUAL' AND RTM.RECEIVER_TYPE = 'BUSINESS' THEN 'INDIVIDUAL TO BUSINESS'
                                        WHEN STM.SENDER_TYPE = 'BUSINESS' AND RTM.RECEIVER_TYPE = 'INDIVIDUAL' THEN 'BUSINESS TO INDIVIDUAL'
                                        WHEN STM.SENDER_TYPE = 'BUSINESS' AND RTM.RECEIVER_TYPE = 'BUSINESS' THEN 'BUSINESS TO BUSINESS'
                                   END AS TRASNACTION_TYPE
    FROM SENDER_TYPE_MAPPING STM, RECEIVER_TYPE_MAPPING RTM 
    WHERE STM.TRANSID = RTM.TRANSID
)
SELECT TTM.TRASNACTION_TYPE, COUNT(TTM.TRANSID) AS TRANSACTION_COUNT FROM TRANASCTION_TYPE_MAPPING TTM GROUP BY TTM.TRASNACTION_TYPE;

--[Internal view] Masking token ID, account number for customer support representative
CREATE OR REPLACE VIEW TOKEN_VIEW_DATA  AS
SELECT  '*****' || SUBSTR(TO_CHAR(SRPT.TOKEN_ID),-4,4) AS TOKEN_ID, 
        '*****' || SUBSTR(TO_CHAR(SRPT.SENDER_BANK_ACCOUNT_NUMBER),-4,4) AS SENDER_BANK_ACCOUNT_NUMBER, 
        SC.FIRST_NAME || ' ' || SC.LAST_NAME AS SENDER_NAME, 
        '*****' || SUBSTR(TO_CHAR(SRPT.RECEIVER_BANK_ACCOUNT_NUMBER),-4,4) AS RECEIVER_BANK_ACCOUNT_NUMBER, 
        RC.FIRST_NAME || ' ' || RC.LAST_NAME AS RECEIVER_NAME, 
        SRPT.TOKEN_STATUS AS TOKEN_STATUS
FROM SENDER_RECEIVER_PAYMENT_TOKEN SRPT
    JOIN CUSTOMER_BANK_ACCOUNT SCBA ON SRPT.SENDER_BANK_ACCOUNT_NUMBER = SCBA.BANK_ACCOUNT_NUMBER
    JOIN CUSTOMER SC ON SCBA.CUSTOMER_ID = SC.CUSTOMER_ID
    JOIN CUSTOMER_BANK_ACCOUNT RCBA ON SRPT.RECEIVER_BANK_ACCOUNT_NUMBER = RCBA.BANK_ACCOUNT_NUMBER
    JOIN CUSTOMER RC ON RCBA.CUSTOMER_ID = RC.CUSTOMER_ID;


GRANT SELECT ON CUSTOMER to DEVELOPER;
GRANT SELECT ON CUSTOMER_ADDRESS to DEVELOPER;
GRANT SELECT ON BANK to DEVELOPER;
GRANT SELECT ON BUSINESS_DETAIL to DEVELOPER;
GRANT SELECT ON TOKEN_VIEW_DATA to DEVELOPER;

GRANT SELECT ON CUSTOMER to PROD;
GRANT SELECT ON CUSTOMER_ADDRESS to PROD;
GRANT SELECT ON BANK to PROD;
GRANT SELECT ON BUSINESS_DETAIL to PROD;
GRANT SELECT ON CUSTOMER_BANK_ACCOUNT to PROD;
GRANT SELECT ON SENDER_RECEIVER_PAYMENT_TOKEN to PROD;
GRANT SELECT ON TRANSACTION to PROD;

GRANT SELECT ON CUSTOMER to CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON CUSTOMER_ADDRESS to CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON BANK to CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON BUSINESS_DETAIL to CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON BANK_ACCOUNT_IN_MONTH_FOR_BANK to CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON MONEY_SENT_AND_RECEIVED_FROM_BANK_ACCOUNT to CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON LIST_OFCUSTOMER_WITH_ACTIVE_OR_INACTIVE_ACCOUNT to CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON NUMBER_OF_TRANSACTION_FOR_CATEGORY to CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON TOKEN_VIEW_DATA to CUSTOMER_SERVICE_EXECUTIVE;

GRANT SELECT ON CUSTOMER to FINANCE_CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON CUSTOMER_ADDRESS to FINANCE_CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON BANK to FINANCE_CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON BUSINESS_DETAIL to FINANCE_CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON CUSTOMER_BANK_ACCOUNT to FINANCE_CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON BANK_ACCOUNT_IN_MONTH_FOR_BANK to FINANCE_CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON MONEY_SENT_AND_RECEIVED_FROM_BANK_ACCOUNT to FINANCE_CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON LIST_OFCUSTOMER_WITH_ACTIVE_OR_INACTIVE_ACCOUNT to FINANCE_CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON NUMBER_OF_TRANSACTION_FOR_CATEGORY to FINANCE_CUSTOMER_SERVICE_EXECUTIVE;
GRANT SELECT ON TOKEN_VIEW_DATA to FINANCE_CUSTOMER_SERVICE_EXECUTIVE;