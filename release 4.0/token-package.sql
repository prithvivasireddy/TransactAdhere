set serveroutput on size 30000;

CREATE OR REPLACE PACKAGE TOKEN_PACKAGE AS 
   -- INSERT A TOKEN
   PROCEDURE TOKENINSERT(
        P_SENDER_BANK_ACCOUNT_NUMBER IN SENDER_RECEIVER_PAYMENT_TOKEN.SENDER_BANK_ACCOUNT_NUMBER%TYPE,
        P_RECEIVER_BANK_ACCOUNT_NUMBER IN SENDER_RECEIVER_PAYMENT_TOKEN.RECEIVER_BANK_ACCOUNT_NUMBER%TYPE,
        P_TOKEN_STATUS IN SENDER_RECEIVER_PAYMENT_TOKEN.TOKEN_STATUS%TYPE,
        P_TOKEN_VALIDATION_MONTH INT);
    
    -- UPDATE A TOKEN
    PROCEDURE TOKENUPDATE(
        P_TOKEN_ID IN SENDER_RECEIVER_PAYMENT_TOKEN.TOKEN_ID%TYPE,
        P_TOKEN_STATUS IN SENDER_RECEIVER_PAYMENT_TOKEN.TOKEN_STATUS%TYPE);
    
END TOKEN_PACKAGE;
/

CREATE OR REPLACE PACKAGE BODY TOKEN_PACKAGE AS 
    PROCEDURE TOKENINSERT(
    P_SENDER_BANK_ACCOUNT_NUMBER IN SENDER_RECEIVER_PAYMENT_TOKEN.SENDER_BANK_ACCOUNT_NUMBER%TYPE,
    P_RECEIVER_BANK_ACCOUNT_NUMBER IN SENDER_RECEIVER_PAYMENT_TOKEN.RECEIVER_BANK_ACCOUNT_NUMBER%TYPE,
    P_TOKEN_STATUS IN SENDER_RECEIVER_PAYMENT_TOKEN.TOKEN_STATUS%TYPE,
    P_TOKEN_VALIDATION_MONTH INT)
    IS
        P_SENDER_BANK_ACCOUNT_STATUS CHAR(10);
        P_RECEIVER_BANK_ACCOUNT_STATUS CHAR(10);
        ACCOUNT_COUNT INT;
        FAIL EXCEPTION;
    BEGIN
    -- Verifying SENDER_BANK_ACCOUNT AND RECEIVER_BANK_ACCOUNT NOT SAME
        BEGIN
            IF P_SENDER_BANK_ACCOUNT_NUMBER = P_RECEIVER_BANK_ACCOUNT_NUMBER 
            THEN 
                DBMS_OUTPUT.PUT_LINE('ERROR ! SENDER AND RECEIVER ACCOUNT NUMBER IS SAME');
                RAISE FAIL;
            END IF;
        END;    
        BEGIN
            SELECT ACCOUNT_STATUS INTO P_SENDER_BANK_ACCOUNT_STATUS
            FROM CUSTOMER_BANK_ACCOUNT
            WHERE BANK_ACCOUNT_NUMBER = P_SENDER_BANK_ACCOUNT_NUMBER;
            SELECT ACCOUNT_STATUS INTO P_RECEIVER_BANK_ACCOUNT_STATUS
            FROM CUSTOMER_BANK_ACCOUNT
            WHERE BANK_ACCOUNT_NUMBER = P_RECEIVER_BANK_ACCOUNT_NUMBER;
        EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('ERROR ! SENDER OR RECEIVER BANK ACCOUNT NOT FOUND');
            RAISE FAIL;
        END;
    -- Verifying ACCOUNT STATUS ACTIVE
        BEGIN
            IF  P_SENDER_BANK_ACCOUNT_STATUS = 'INACTIVE' OR P_RECEIVER_BANK_ACCOUNT_STATUS = 'INACTIVE'
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! SENDER OR RECEIVER ACCOUNT is Inactive');
                RAISE Fail;
            END IF;  
        END;
    -- VERIFY TOKEN ALREADY DOESNOT EXIST
        BEGIN
            SELECT COUNT(*) INTO ACCOUNT_COUNT
            FROM SENDER_RECEIVER_PAYMENT_TOKEN
            WHERE SENDER_BANK_ACCOUNT_NUMBER = P_SENDER_BANK_ACCOUNT_NUMBER AND RECEIVER_BANK_ACCOUNT_NUMBER = P_RECEIVER_BANK_ACCOUNT_NUMBER;
            
            IF ACCOUNT_COUNT > 0 
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! TOKEN ALREADY EXIST BETWEEN SENDER AND RECEIVER ACCOUNT');
                RAISE Fail;
            END IF;
        END;
        --Insert the TOKEN
        BEGIN 
            insert into sender_receiver_payment_token (token_id, sender_bank_account_number, receiver_bank_account_number, token_creation_date, token_status, token_validation_end_date)
            values (token_id_seq.nextval, P_SENDER_BANK_ACCOUNT_NUMBER, P_RECEIVER_BANK_ACCOUNT_NUMBER, sysdate, P_TOKEN_STATUS, ADD_MONTHS(SYSDATE, P_TOKEN_VALIDATION_MONTH));
        EXCEPTION 
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! Insertion Failed');
                RAISE Fail;
        END;
    EXCEPTION
        WHEN OTHERS THEN 
            NULL;
    END TOKENINSERT;
    
    PROCEDURE TOKENUPDATE(
        P_TOKEN_ID IN SENDER_RECEIVER_PAYMENT_TOKEN.TOKEN_ID%TYPE,
        P_TOKEN_STATUS IN SENDER_RECEIVER_PAYMENT_TOKEN.TOKEN_STATUS%TYPE)
    IS
        P_TOKEN_STATUS_OLD CHAR(10);
        Fail EXCEPTION;
    BEGIN
    -- Verifying THE TOKEN EXIST
        BEGIN
            SELECT TOKEN_STATUS INTO P_TOKEN_STATUS_OLD 
            FROM SENDER_RECEIVER_PAYMENT_TOKEN
            WHERE TOKEN_ID = P_TOKEN_ID;
        EXCEPTION 
            WHEN NO_DATA_FOUND THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! Wrong TOKEN ID');
        END;
    -- Verifying THE UPDATE IS from VALID TOKEN STATE and in VALID TOKEN STATE
        BEGIN
            IF NOT ((P_TOKEN_STATUS_OLD = 'INACTIVE' AND P_TOKEN_STATUS IN ('ACTIVE','EXPIRED')) OR (P_TOKEN_STATUS_OLD = 'ACTIVE' AND P_TOKEN_STATUS IN ('INACTIVE', 'EXPIRED')))
            THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! TOKEN IS NOT IN VALID STATE OR UPDATE IS TO INVALID STATE');
                RAISE Fail;
            END IF;  
        END;
    -- UPDATING THE TOKEN
        BEGIN 
            UPDATE SENDER_RECEIVER_PAYMENT_TOKEN 
            SET TOKEN_STATUS = P_TOKEN_STATUS
            WHERE TOKEN_ID = P_TOKEN_ID;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('ERROR ! UPDATION Failed');
                RAISE Fail;
        END;
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END TOKENUPDATE;
END TOKEN_PACKAGE;
/

GRANT EXECUTE ON TOKEN_PACKAGE to PROD;
COMMIT;